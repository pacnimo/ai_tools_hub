// File: package.json
{
  "name": "ai-tools-hub",
  "version": "1.0.0",
  "description": "AI Tools Hub - Discover and manage cutting-edge AI tools",
  "main": "app.js",
  "scripts": {
    "start": "node app.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "mongoose": "^5.12.3",
    "body-parser": "^1.19.0"
  }
}

// File: app.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const port = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/ai_tools_hub', { useNewUrlParser: true, useUnifiedTopology: true });

// Define schema for AI tools
const toolSchema = new mongoose.Schema({
  name: String,
  category: String,
  description: String
});

const Tool = mongoose.model('Tool', toolSchema);

app.use(bodyParser.json());
app.use(express.static('public'));

// API routes
app.get('/api/tools', async (req, res) => {
  const tools = await Tool.find();
  res.json(tools);
});

app.post('/api/tools', async (req, res) => {
  const tool = new Tool(req.body);
  await tool.save();
  res.status(201).json(tool);
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

// File: public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Tools Hub</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <header>
        <h1>AI Tools Hub</h1>
        <p>Discover and manage cutting-edge AI tools for various tasks.</p>
    </header>

    <div class="controls">
        <select id="category-filter">
            <option value="">All Categories</option>
        </select>
        <button onclick="openAddToolModal()">Add New Tool</button>
        <button id="theme-toggle">ðŸŒ“</button>
    </div>

    <div id="categories" class="categories-grid"></div>

    <div id="add-tool-modal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddToolModal()">&times;</span>
            <h2>Add New Tool</h2>
            <form id="add-tool-form">
                <input type="text" id="tool-name" placeholder="Tool Name" required>
                <input type="text" id="tool-category" placeholder="Category" required>
                <textarea id="tool-description" placeholder="Description" required></textarea>
                <button type="submit">Add Tool</button>
            </form>
        </div>
    </div>

    <div id="tool-details"></div>

    <script src="script.js"></script>
</body>
</html>

// File: public/styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    transition: background-color 0.3s, color 0.3s;
}

header {
    text-align: center;
    margin-bottom: 20px;
}

.controls {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.categories-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.4);
}

.modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border: 1px solid #888;
    width: 80%;
    max-width: 500px;
}

.close {
    color: #aaa;
    float: right;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
}

/* Dark mode styles */
body.dark-mode {
    background-color: #333;
    color: #fff;
}

// File: public/script.js
let tools = [];

async function fetchTools() {
    const response = await fetch('/api/tools');
    tools = await response.json();
    renderTools();
}

function renderTools() {
    const categoriesGrid = document.getElementById('categories');
    categoriesGrid.innerHTML = '';

    const categories = [...new Set(tools.map(tool => tool.category))];
    
    categories.forEach(category => {
        const categoryElement = document.createElement('div');
        categoryElement.className = 'category';
        categoryElement.innerHTML = `
            <h2>${category}</h2>
            <ul>
                ${tools.filter(tool => tool.category === category)
                    .map(tool => `<li>${tool.name}</li>`)
                    .join('')}
            </ul>
        `;
        categoriesGrid.appendChild(categoryElement);
    });
}

function openAddToolModal() {
    document.getElementById('add-tool-modal').style.display = 'block';
}

function closeAddToolModal() {
    document.getElementById('add-tool-modal').style.display = 'none';
}

document.getElementById('add-tool-form').addEventListener('submit', async (e) => {
    e.preventDefault();
    const newTool = {
        name: document.getElementById('tool-name').value,
        category: document.getElementById('tool-category').value,
        description: document.getElementById('tool-description').value
    };

    const response = await fetch('/api/tools', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(newTool)
    });

    if (response.ok) {
        closeAddToolModal();
        fetchTools();
    }
});

document.getElementById('theme-toggle').addEventListener('click', () => {
    document.body.classList.toggle('dark-mode');
});

fetchTools();
